#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>
#include<sys/types.h>
#include<errno.h>
#include<sys/wait.h>

#define SIZE 512
#define ZERO '\0'//剔除\n
#define SEP ""
#define NUM 32
int lastcode=0;
char* argv[SIZE];//被打散的命令存这里
//打印命令提示行的函数，命令提示行包括用户名+主机名+当前工作目录
//此为获取用户名
const char* getUser(){
  char* user=getenv("USER");
  if(user){
    return user;
  }else{
    return "None";
  }
}
//此为获取主机名
const char* getHost(){
  char* host=getenv("HOSTNAME");
  if(host){
    return host;
  }else{
    return "None";
  }
}
//此为获取当前路径
const char* getPwd(){
  char* pwd=getenv("PWD");
  if(pwd){
    return pwd;
  }else{
    return "None";
  }
}
//这是整合上面三者的函数
void MakeCommandLine(){
  char line[SIZE];
  const char* username=getUser();
  const char* hostname=getHost();
  const char* cwd=getPwd();
  snprintf(line,sizeof(line), "[%s@%s %s]#", username, hostname, cwd);
 //snprintf是给定大小的更安全的向内存空间中写入的printf（写到缓冲区）
  printf("%s",line);
  fflush(stdout);
}
//获取用户命令
int getCommand(char userCommand[],int n){
  char* s=fgets(userCommand,n,stdin);//使用fgets()函数获取命令
  if(s==NULL){                                  
  return -1;
  }
  userCommand[strlen(userCommand)-1]=ZERO;
  return strlen(userCommand);
}                         
//分散字符串
void commandSplit(char* in,char* out[]){//in是输入的字符串，out[]是打散的字符数组
  int argc=0;
  out[argc++]=strtok(in,SEP);//此处的SEP是宏定义，SEP是空格的意思
  while((out[argc++]=strtok(NULL,SEP)));
#ifdef debug 
    int i=0;
    for(i=0;out[i];i++){
      printf("%s\n",out[i]);
    }
#endif
}
//进程替换
int execute(){
  pid_t id=fork();//创建子进程
  if(id==0){
    printf("son process begining...");
    execvp(argv[0],argv);//替换进程,此处有问题，execvp一直找不到进程执行
    exit(0);//替换失败就会退出
  }else{
    int status=0;
    pid_t rid=waitpid(-1,&status,0);
    if(rid==id){//父进程在这里只需要等待子进程就好了
      printf("wait success\n");
      lastcode=WEXITSTATUS(status);
      printf("%d",lastcode);
      return 0;
    }
  }
return 0;
} 

int main(){
  while(1){
  MakeCommandLine();
  char userCommand[SIZE];//输入的命令存这里
  getCommand(userCommand,sizeof(userCommand));
  commandSplit(userCommand,argv);
   int i=0; 
    for(i=0;argv[i];i++){
    printf("%s\n",argv[i]);
  }                       
  execute();
  } 
}
